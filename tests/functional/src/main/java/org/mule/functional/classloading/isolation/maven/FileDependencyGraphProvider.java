/*
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.functional.classloading.isolation.maven;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;

import static java.nio.file.Files.getFileAttributeView;
import static java.nio.file.Paths.get;

/**
 * It relies on the {@link FileDependencyGraphProvider#DEPENDENCIES_GRAPH_FILE_NAME} generated by the
 * depgraph-maven-plugin and the artifact should have set this plugin
 * in its maven build section and run it before the test is executed.
 */
public class FileDependencyGraphProvider implements RawDependencyGraphProvider{
    private static final String DEPENDENCIES_GRAPH_FILE_NAME = "dependency-graph.dot";

    protected final transient Logger logger = LoggerFactory.getLogger(this.getClass());

    public List<String> getDependencyGraph() {
        File dependenciesGraphFile = getDependenciesGraphFile();
        Path dependenciesPath = get(dependenciesGraphFile.toURI());

        logDependencyGraphFileLoaded(dependenciesGraphFile, dependenciesPath);
        try {
            return Files.readAllLines(dependenciesGraphFile.toPath(), Charset.defaultCharset());
        } catch (IOException e) {
            throw new RuntimeException("Error while reading dependencies from depgraph-maven-plugin output file", e);
        }
    }

    private File getDependenciesGraphFile() {
        URL dependenciesListFileURL = DependencyGraphMavenDependenciesResolver.class.getClassLoader().getResource(DEPENDENCIES_GRAPH_FILE_NAME);
        if (dependenciesListFileURL == null) {
            throw new IllegalStateException(DEPENDENCIES_GRAPH_FILE_NAME + " not found, the maven plugin 'depgraph-maven-plugin' should be executed first.");
        }
        File file = new File(dependenciesListFileURL.getFile());
        if (!file.exists()) {
            throw new IllegalStateException(String.format("Unable to resolve dependencies for test due to file '%s' was not found", DEPENDENCIES_GRAPH_FILE_NAME));
        }

        return file;
    }

    private void logDependencyGraphFileLoaded(File dependenciesGraphFile , Path dependenciesPath) {
        BasicFileAttributes view = null;
        try {
            view = getFileAttributeView(dependenciesPath, BasicFileAttributeView.class).readAttributes();
            logger.debug("Building maven dependencies graph using depgraph-maven-plugin output file: '{}', created: {}, last modified: {}", dependenciesGraphFile, view.creationTime(), view.lastModifiedTime());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

} 